buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.0+', changing: true
    }
}

plugins {
    id  'idea'
    id 'java'
}

subprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'java'

    group = maven_group
    archivesBaseName = mod_id
    version = "${mod_version}+${minecraft_version}"

    java {
        toolchain {
            languageVersion = JavaLanguageVersion.of(8)
        }
    }

    sourceSets {
        main.resources.srcDirs += file('src/generated/resources')
    }

    minecraft {
        mappings channel: "${mappings_channel}", version: "1.16.3"
        // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        runs {
            client {
                workingDirectory project.file('run')

                // Recommended logging data for a userdev environment
                //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // Recommended logging level for the console
                property 'forge.logging.console.level', 'info'

                mods {
                    "${mod_id}" {
                        source sourceSets.main
                    }
                }
            }

            server {
                workingDirectory project.file('run')

                // Recommended logging data for a userdev environment
                //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // Recommended logging level for the console
                property 'forge.logging.console.level', 'info'

                mods {
                    "${mod_id}" {
                        source sourceSets.main
                    }
                }
            }

            data {
                workingDirectory project.file('run')

                // Recommended logging data for a userdev environment
                //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // Recommended logging level for the console
                property 'forge.logging.console.level', 'info'

                args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

                mods {
                    "${mod_id}" {
                        source sourceSets.main
                    }
                }
            }
        }
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    }

    jar {
        manifest {
            attributes([
                    "Specification-Title": "${mod_id}",
                    "Specification-Vendor": "${author_name}",
                    "Specification-Version": "1", // We are version 1 of ourselves
                    "Implementation-Title": "${mod_name}",
                    "Implementation-Version": "${mod_version}",
                    "Implementation-Vendor" :"${author_name}",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    jar { from("LICENSE") }

    processResources {
        def props = ["mod_id": project.properties.mod_id,
                     "mod_name": project.properties.mod_name,
                     "mod_version": project.properties.mod_version]
        inputs.properties props

        filesMatching('META-INF/mods.toml') {
            expand props
        }
    }

    publish.dependsOn('reobfJar')
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact jar
            }
        }
        repositories {
            maven {
                url "file:///${project.projectDir}/mcmodsrepo"
            }
        }
    }

    task sourcesJar(type: Jar) {
        archiveClassifier = "sources"
        from sourceSets.main.allJava
        from("LICENSE")
    }

    artifacts { archives sourcesJar }
}

allprojects {
    idea {
        module {
            excludeDirs += file('.idea')
            excludeDirs += file('gradle')
        }
    }
}