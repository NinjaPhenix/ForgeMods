buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id  'idea'
    id 'com.matthewprenger.cursegradle' version '1.4.0' apply false
}

subprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'maven-publish'
    apply plugin: 'idea'
    apply plugin: 'com.matthewprenger.cursegradle'

    group = maven_group
    archivesBaseName = mod_id
    version = "${mod_version}+${minecraft_version}"

    java {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    minecraft {
        mappings channel: "${mappings_channel}", version: "${mappings_version}"
        // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')
        runs {
            client {
                workingDirectory project.file('run')

                // Recommended logging data for a userdev environment
                //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // Recommended logging level for the console
                property 'forge.logging.console.level', 'info'
            }

            server {
                workingDirectory project.file('run')

                // Recommended logging data for a userdev environment
                //property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

                // Recommended logging level for the console
                property 'forge.logging.console.level', 'info'
            }
        }
    }

    dependencies {
        minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"
    }

    jar {
        manifest {
            attributes([
                    "Specification-Title": "${mod_id}",
                    "Specification-Vendor": "${author_name}",
                    "Specification-Version": "1", // We are version 1 of ourselves
                    "Implementation-Title": "${mod_name}",
                    "Implementation-Version": "${mod_version}",
                    "Implementation-Vendor" :"${author_name}",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
            ])
        }
    }

    jar { from("LICENSE") }

    processResources {
        inputs.properties(
                "mod_id": mod_id,
                "mod_name": mod_name,
                "mod_version": mod_version,
                "minecraft_version": minecraft_version
        )
        from(sourceSets.main.resources.srcDirs) {
            include 'mcmod.info'
            expand(
                    "mod_id": mod_id,
                    "mod_name": mod_name,
                    "mod_version": mod_version,
                    "minecraft_version": minecraft_version,
            )
        }
        from(sourceSets.main.resources.srcDirs) {
            exclude 'mcmod.info'
        }
    }

    publish.dependsOn('reobfJar')
    publishing {
        publications {
            mavenJava(MavenPublication) {
                artifact jar
            }
        }
        repositories {
            maven {
                url "file:///${project.projectDir}/mcmodsrepo"
            }
        }
    }

    //<editor-fold desc="Curseforge & Github Release">
    task release {
        doLast {
            def tagName = "${mod_id}-${mod_version}+${minecraft_version}"
            def commit = "git rev-parse HEAD".execute().in.readLines().get(0)
            if (extensions.getExtraProperties().has('artifactId')) {
                def artifactId = extensions.getExtraProperties().get('artifactId')
                def url = String.format(curseforge_url_template, curseforge_project_slug, artifactId)
                if ('false'.equalsIgnoreCase(upload_debug)) {
                    "hub release create -t ${commit} -m ${tagName} -m ${url} ${tagName}".execute()
                    println "Created release for tag ${tagName} with message ${url}"
                }
            } else {
                if ('false'.equalsIgnoreCase(upload_debug)) {
                    "hub release create -a ${projectDir.getName()}/build/libs/${tagName}.jar -a ${projectDir.getName()}/build/libs/${tagName}-sources.jar -m ${tagName} -m ${tagName} -t ${commit} ${tagName}".execute()
                    println "Created release for tag ${tagName} with message ${tagName}"
                }
            }
        }
    }

    def curseforge_api_key = System.getenv("CURSEFORGE_API_KEY")
    if (curseforge_api_key != null && project.hasProperty("curseforge_project_id")) {
        curseforge {
            apiKey = curseforge_api_key
            //noinspection GroovyAssignabilityCheck
            project {
                id = curseforge_project_id
                changelogType = "markdown"
                changelog = file("${projectDir}/changelog.md")
                releaseType = curseforge_release_type
                addGameVersion curseforge_game_version
                addGameVersion "Forge"
                addGameVersion "Java 8" // lets be honest, we're going to be stuck on java 8 for the next 5 years.
                if (project.hasProperty("curseforge_required_dependencies") ||
                        project.hasProperty("curseforge_embedded_dependencies") ||
                        project.hasProperty("curseforge_optional_dependencies")) {
                    relations {
                        if (project.hasProperty("curseforge_required_dependencies")) {
                            curseforge_required_dependencies.tokenize(':').each { requiredDependency it }
                        }
                        if (project.hasProperty("curseforge_embedded_dependencies")) {
                            curseforge_embedded_dependencies.tokenize(':').each { embeddedLibrary it }
                        }
                        if (project.hasProperty("curseforge_optional_dependencies")) {
                            curseforge_optional_dependencies.tokenize(':').each { optionalDependency it }
                        }
                    }
                }
                mainArtifact(file("${project.buildDir}/libs/${mod_id}-${mod_version}+${minecraft_version}.jar")) {
                    displayName = "${mod_name} ${mod_version}+${minecraft_version}"
                }
                addArtifact(file("${project.buildDir}/libs/${mod_id}-${mod_version}+${minecraft_version}-sources.jar")) {
                    changelogType = 'markdown'
                    changelog = file("${project.rootDir}/sources-changelog.md")
                }
                afterEvaluate {
                    uploadTask.dependsOn("sourcesJar")
                }
            }
            options {
                forgeGradleIntegration = false
                debug = "true".equalsIgnoreCase(upload_debug)
            }
        }

        release {
            dependsOn "curseforge"
            doFirst {
                extensions.getExtraProperties().set("artifactId", curseforge.curseProjects[0].mainArtifact.getFileID())
            }
        }
    }
    else
    {
        release {
            dependsOn "reobfJar"
        }
    }
    //</editor-fold>

    task sourcesJar(type: Jar) {
        archiveClassifier = "sources"
        from sourceSets.main.allJava
        from("LICENSE")
    }

    artifacts { archives sourcesJar }

    idea {
        module {
                excludeDirs += file('build')
                excludeDirs += file('run')
        }
    }
}

idea {
    module {
        excludeDirs += file('.idea')
        excludeDirs += file('gradle')
    }
}